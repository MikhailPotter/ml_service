# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import service_pb2 as service__pb2


class ModelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.fit = channel.unary_unary(
                '/Model/fit',
                request_serializer=service__pb2.DataParams.SerializeToString,
                response_deserializer=service__pb2.FitResponse.FromString,
                )
        self.refit = channel.unary_unary(
                '/Model/refit',
                request_serializer=service__pb2.DataParams.SerializeToString,
                response_deserializer=service__pb2.RefitResponse.FromString,
                )
        self.remove = channel.unary_unary(
                '/Model/remove',
                request_serializer=service__pb2.getModelParams.SerializeToString,
                response_deserializer=service__pb2.RemoveResponse.FromString,
                )
        self.predict = channel.unary_unary(
                '/Model/predict',
                request_serializer=service__pb2.PredictParams.SerializeToString,
                response_deserializer=service__pb2.PredictResponse.FromString,
                )
        self.show = channel.unary_unary(
                '/Model/show',
                request_serializer=service__pb2.getModelParams.SerializeToString,
                response_deserializer=service__pb2.ShowResponse.FromString,
                )


class ModelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def fit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def refit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def show(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'fit': grpc.unary_unary_rpc_method_handler(
                    servicer.fit,
                    request_deserializer=service__pb2.DataParams.FromString,
                    response_serializer=service__pb2.FitResponse.SerializeToString,
            ),
            'refit': grpc.unary_unary_rpc_method_handler(
                    servicer.refit,
                    request_deserializer=service__pb2.DataParams.FromString,
                    response_serializer=service__pb2.RefitResponse.SerializeToString,
            ),
            'remove': grpc.unary_unary_rpc_method_handler(
                    servicer.remove,
                    request_deserializer=service__pb2.getModelParams.FromString,
                    response_serializer=service__pb2.RemoveResponse.SerializeToString,
            ),
            'predict': grpc.unary_unary_rpc_method_handler(
                    servicer.predict,
                    request_deserializer=service__pb2.PredictParams.FromString,
                    response_serializer=service__pb2.PredictResponse.SerializeToString,
            ),
            'show': grpc.unary_unary_rpc_method_handler(
                    servicer.show,
                    request_deserializer=service__pb2.getModelParams.FromString,
                    response_serializer=service__pb2.ShowResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Model', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Model(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def fit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/Model/fit',
            service__pb2.DataParams.SerializeToString,
            service__pb2.FitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata
        )

    @staticmethod
    def refit(request,
              target,
              options=(),
              channel_credentials=None,
              call_credentials=None,
              insecure=False,
              compression=None,
              wait_for_ready=None,
              timeout=None,
              metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/Model/refit',
            service__pb2.DataParams.SerializeToString,
            service__pb2.RefitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata
        )

    @staticmethod
    def remove(request,
               target,
               options=(),
               channel_credentials=None,
               call_credentials=None,
               insecure=False,
               compression=None,
               wait_for_ready=None,
               timeout=None,
               metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/Model/remove',
            service__pb2.getModelParams.SerializeToString,
            service__pb2.RemoveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata
        )

    @staticmethod
    def predict(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/Model/predict',
            service__pb2.PredictParams.SerializeToString,
            service__pb2.PredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata
            )

    @staticmethod
    def show(request,
             target,
             options=(),
             channel_credentials=None,
             call_credentials=None,
             insecure=False,
             compression=None,            
             wait_for_ready=None,
             timeout=None,
             metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/Model/show',
            service__pb2.getModelParams.SerializeToString,
            service__pb2.ShowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata
        )
